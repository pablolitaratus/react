{"version":3,"sources":["components/AddCategory.js","helpers/getFifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","getFifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEPC,mBAAS,IAFF,mBAErCC,EAFqC,KAEzBC,EAFyB,KAiB5C,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAQ,OAAMP,GAAN,mBAAqBO,OAC3CN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,Y,uBCRnBG,EAAO,uCAAG,WAAQL,GAAR,uBAAAM,EAAA,6DACbC,EADa,iDACmCC,UAAUR,GAD7C,+DAEAS,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAWZM,GAXY,4CAAH,sDCEPO,EAAc,SAAC,GAAwB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAErC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAKA,KCHJO,EAAU,SAAC,GAAgB,IAAfxB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EAEfR,mBAAS,CAC5BoB,KAAM,GACNa,SAAS,IAJyB,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAoBtC,OAbAC,qBAAU,WACNvB,EAASL,GAAW6B,MAAM,SAAAC,GAGtBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKlB,CAACzB,IAEG0B,EDhB0BK,CAAc/B,GAAlCkB,EAHsB,EAG3BN,KAAaa,EAHc,EAGdA,QAGrB,OACI,oCACI,4BAAKzB,GACHyB,GAAW,uBAAGJ,UAAU,uDAAb,YACb,yBAAKA,UAAU,aAEVH,EAAOJ,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,eAAaiB,IAAKjB,EAAIC,IAAQD,UEZpDkB,EAAe,WAAO,IAAD,EAEMzC,mBAAS,CAAC,aAFhB,mBAEvB0C,EAFuB,KAEX3C,EAFW,KAQ9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACM2C,EAAWpB,KAAK,SAAAd,GAAQ,OAAI,kBAAC,EAAD,CACEgC,IAAMhC,EACNA,SAAUA,UCd1DmC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.b9cc0c1f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue ] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(category => [ inputValue, ...category ]);\r\n            setInputValue('')\r\n        }\r\n    }\r\n        \r\n\r\n    return( \r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={ handleInputChange }\r\n                \r\n                />\r\n        </form>\r\n    )\r\n\r\n  \r\n} \r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n","export const getFifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=30&api_key=eLOLyezFNak1t5Zi7HAcDqwIMBGDlnNQ`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React, { useState, useEffect } from 'react';\r\n\r\nexport const GifGridItem = ( {id, title, url } ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title} />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}","import React, { PureComponent } from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            { loading && <p className=\"animate__animated animate__bounce animate__delay-2s\"> Loading</p>}\r\n            <div className=\"card-grid\">\r\n\r\n                {images.map(img => <GifGridItem key={img.id} {...img} />)}\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}","import { useState, useEffect } from 'react';\r\nimport { getFifs } from '../helpers/getFifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n   \r\nconst [state, setState ] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getFifs( category ).then( imgs => {\r\n\r\n\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n\r\n\r\n        }) \r\n    }, [category])\r\n\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['iron man']);\r\n\r\n    // const handleAdd = () => {\r\n    //     setCategories([...categories, 'nuevo'])\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n\r\n            <ol>\r\n                { categories.map( category => <GifGrid \r\n                                                key={ category }\r\n                                                category={category}\r\n                                            />)}            \r\n            </ol>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n//"],"sourceRoot":""}